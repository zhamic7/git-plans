{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":";AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAczC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;YAEP;QACF,OAAO;;QAMP;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored['react-ssr'].React\n"],"names":["module","exports","require","vendored","React"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CAAC,YAAY,CAACC,KAAK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/quick-lru/index.js"],"sourcesContent":["export default class QuickLRU extends Map {\n\t#size = 0;\n\t#cache = new Map();\n\t#oldCache = new Map();\n\t#maxSize;\n\t#maxAge;\n\t#onEviction;\n\n\tconstructor(options = {}) {\n\t\tsuper();\n\n\t\tif (!(options.maxSize && options.maxSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tif (typeof options.maxAge === 'number' && options.maxAge === 0) {\n\t\t\tthrow new TypeError('`maxAge` must be a number greater than 0');\n\t\t}\n\n\t\tthis.#maxSize = options.maxSize;\n\t\tthis.#maxAge = options.maxAge || Number.POSITIVE_INFINITY;\n\t\tthis.#onEviction = options.onEviction;\n\t}\n\n\t// For tests.\n\tget __oldCache() {\n\t\treturn this.#oldCache;\n\t}\n\n\t#emitEvictions(cache) {\n\t\tif (typeof this.#onEviction !== 'function') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const [key, item] of cache) {\n\t\t\tthis.#onEviction(key, item.value);\n\t\t}\n\t}\n\n\t#deleteIfExpired(key, item) {\n\t\tif (typeof item.expiry === 'number' && item.expiry <= Date.now()) {\n\t\t\tif (typeof this.#onEviction === 'function') {\n\t\t\t\tthis.#onEviction(key, item.value);\n\t\t\t}\n\n\t\t\treturn this.delete(key);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t#getOrDeleteIfExpired(key, item) {\n\t\tconst deleted = this.#deleteIfExpired(key, item);\n\t\tif (deleted === false) {\n\t\t\treturn item.value;\n\t\t}\n\t}\n\n\t#getItemValue(key, item) {\n\t\treturn item.expiry ? this.#getOrDeleteIfExpired(key, item) : item.value;\n\t}\n\n\t#peek(key, cache) {\n\t\tconst item = cache.get(key);\n\n\t\treturn this.#getItemValue(key, item);\n\t}\n\n\t#set(key, value) {\n\t\tthis.#cache.set(key, value);\n\t\tthis.#size++;\n\n\t\tif (this.#size >= this.#maxSize) {\n\t\t\tthis.#size = 0;\n\t\t\tthis.#emitEvictions(this.#oldCache);\n\t\t\tthis.#oldCache = this.#cache;\n\t\t\tthis.#cache = new Map();\n\t\t}\n\t}\n\n\t#moveToRecent(key, item) {\n\t\tthis.#oldCache.delete(key);\n\t\tthis.#set(key, item);\n\t}\n\n\t* #entriesAscending() {\n\t\tfor (const item of this.#oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.#cache.has(key)) {\n\t\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.#cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t}\n\t}\n\n\tget(key) {\n\t\tif (this.#cache.has(key)) {\n\t\t\tconst item = this.#cache.get(key);\n\t\t\treturn this.#getItemValue(key, item);\n\t\t}\n\n\t\tif (this.#oldCache.has(key)) {\n\t\t\tconst item = this.#oldCache.get(key);\n\t\t\tif (this.#deleteIfExpired(key, item) === false) {\n\t\t\t\tthis.#moveToRecent(key, item);\n\t\t\t\treturn item.value;\n\t\t\t}\n\t\t}\n\t}\n\n\tset(key, value, {maxAge = this.#maxAge} = {}) {\n\t\tconst expiry = typeof maxAge === 'number' && maxAge !== Number.POSITIVE_INFINITY\n\t\t\t? (Date.now() + maxAge)\n\t\t\t: undefined;\n\n\t\tif (this.#cache.has(key)) {\n\t\t\tthis.#cache.set(key, {\n\t\t\t\tvalue,\n\t\t\t\texpiry,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.#set(key, {value, expiry});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\thas(key) {\n\t\tif (this.#cache.has(key)) {\n\t\t\treturn !this.#deleteIfExpired(key, this.#cache.get(key));\n\t\t}\n\n\t\tif (this.#oldCache.has(key)) {\n\t\t\treturn !this.#deleteIfExpired(key, this.#oldCache.get(key));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpeek(key) {\n\t\tif (this.#cache.has(key)) {\n\t\t\treturn this.#peek(key, this.#cache);\n\t\t}\n\n\t\tif (this.#oldCache.has(key)) {\n\t\t\treturn this.#peek(key, this.#oldCache);\n\t\t}\n\t}\n\n\tdelete(key) {\n\t\tconst deleted = this.#cache.delete(key);\n\t\tif (deleted) {\n\t\t\tthis.#size--;\n\t\t}\n\n\t\treturn this.#oldCache.delete(key) || deleted;\n\t}\n\n\tclear() {\n\t\tthis.#cache.clear();\n\t\tthis.#oldCache.clear();\n\t\tthis.#size = 0;\n\t}\n\n\tresize(newSize) {\n\t\tif (!(newSize && newSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tconst items = [...this.#entriesAscending()];\n\t\tconst removeCount = items.length - newSize;\n\t\tif (removeCount < 0) {\n\t\t\tthis.#cache = new Map(items);\n\t\t\tthis.#oldCache = new Map();\n\t\t\tthis.#size = items.length;\n\t\t} else {\n\t\t\tif (removeCount > 0) {\n\t\t\t\tthis.#emitEvictions(items.slice(0, removeCount));\n\t\t\t}\n\n\t\t\tthis.#oldCache = new Map(items.slice(removeCount));\n\t\t\tthis.#cache = new Map();\n\t\t\tthis.#size = 0;\n\t\t}\n\n\t\tthis.#maxSize = newSize;\n\t}\n\n\t* keys() {\n\t\tfor (const [key] of this) {\n\t\t\tyield key;\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const [, value] of this) {\n\t\t\tyield value;\n\t\t}\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const item of this.#cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.#oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.#cache.has(key)) {\n\t\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesDescending() {\n\t\tlet items = [...this.#cache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\titems = [...this.#oldCache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.#cache.has(key)) {\n\t\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesAscending() {\n\t\tfor (const [key, value] of this.#entriesAscending()) {\n\t\t\tyield [key, value.value];\n\t\t}\n\t}\n\n\tget size() {\n\t\tif (!this.#size) {\n\t\t\treturn this.#oldCache.size;\n\t\t}\n\n\t\tlet oldCacheSize = 0;\n\t\tfor (const key of this.#oldCache.keys()) {\n\t\t\tif (!this.#cache.has(key)) {\n\t\t\t\toldCacheSize++;\n\t\t\t}\n\t\t}\n\n\t\treturn Math.min(this.#size + oldCacheSize, this.#maxSize);\n\t}\n\n\tget maxSize() {\n\t\treturn this.#maxSize;\n\t}\n\n\tentries() {\n\t\treturn this.entriesAscending();\n\t}\n\n\tforEach(callbackFunction, thisArgument = this) {\n\t\tfor (const [key, value] of this.entriesAscending()) {\n\t\t\tcallbackFunction.call(thisArgument, value, key, this);\n\t\t}\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'QuickLRU';\n\t}\n\n\ttoString() {\n\t\treturn `QuickLRU(${this.size}/${this.maxSize})`;\n\t}\n\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\n\t\treturn this.toString();\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"file":"maptiler-client.mjs","sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/config.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/language.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/callFetch.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/defaults.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/services/ServiceError.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/services/geocoding.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/services/geolocation.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/services/coordinates.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/services/data.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/mapstyle.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/misc.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/services/staticMaps.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/services/math.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/tiledecoding.ts","file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/%40maptiler/client/src/services/elevation.ts"],"sourcesContent":["import { BufferToPixelDataFunction } from \"./tiledecoding\";\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n) => Promise<Response>;\n\nfunction tryGettingFetch() {\n  // this is browser, fetch exists\n  if (typeof self !== \"undefined\") {\n    return fetch.bind(self);\n  }\n\n  if (typeof global !== \"undefined\" && global.fetch) {\n    return global.fetch;\n  }\n\n  return null;\n}\n\n/**\n * The configuration object definition\n */\nclass ClientConfig {\n  /**\n   * MapTiler Cloud API key\n   */\n  private _apiKey = \"\";\n\n  /**\n   * The fetch function. To be set if in Node < 18, otherwise\n   * will be automatically resolved.\n   */\n  private _fetch: FetchFunction | null = tryGettingFetch();\n\n  /**\n   * Number of tiles to keep in cache\n   */\n  public tileCacheSize: number = 200;\n\n  public bufferToPixelData: BufferToPixelDataFunction | null;\n\n  /**\n   * Set the MapTiler Cloud API key\n   */\n  set apiKey(k: string) {\n    this._apiKey = k;\n  }\n\n  /**\n   * Get the MapTiler Cloud API key\n   */\n  get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * Set a the custom fetch function to replace the default one\n   */\n  set fetch(f: FetchFunction) {\n    this._fetch = f;\n  }\n\n  /**\n   * Get the fetch fucntion\n   */\n  get fetch(): FetchFunction | null {\n    return this._fetch;\n  }\n}\n\n/**\n * Configuration object\n */\nconst config = new ClientConfig();\n\nexport { ClientConfig, config };\n","export type LanguageInfo = {\n  /**\n   * Two-letter ISO code, such as `\"en\"` for English language.\n   * Can be `null` if the language is a flag to be evaluated at runtime,\n   * as it is the case for some \"modes\".\n   */\n  code: string | null;\n\n  /**\n   * The full OSM language flag, such as `\"name:en\"` for the English language.\n   * Can also be a non-OSM flag if the language needs to be evaluated at runtime, such as `\"auto\"`,\n   * as it is the case for some \"modes\".\n   */\n  flag: string;\n\n  /**\n   * English name of the language.\n   */\n  name: string;\n\n  /**\n   * Whether the language leverages only the latin charsets.\n   */\n  latin: boolean;\n\n  /**\n   * Some language descriptions corresponds to \"modes\" rather than to actual languages.\n   * For instance the \"visitor\" mode consists in displaying bilingual labels.\n   */\n  isMode: boolean;\n\n  /**\n   * Whether the language is compatible with the geocoding API\n   */\n  geocoding: boolean;\n};\n\n/**\n * List of \"non-ISO specific\" languages.\n */\nexport const NonISOLanguage = {\n  /**\n   * Language mode to display the labels in the end user's device language.\n   */\n  AUTO: {\n    code: null,\n    flag: \"auto\",\n    name: \"Auto\",\n    latin: false,\n    isMode: true,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * The OSM language using latin script. MapTiler discourages its use as a primary language setting due to the lack of actual linguistic specificity,\n   * though it can be an handy fallback. This is not to be confused with the \"Classical Latin\" language, which is available under the tag `.CLASSICAL_LATIN`.\n   */\n  LATIN: {\n    code: \"latin\",\n    flag: \"name:latin\",\n    name: \"Latin\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * The OSM language using non-latin script. MapTiler discourages its use as a primary language setting due to the lack of actual linguistic specificity,\n   * though it can be an handy fallback.\n   */\n  NON_LATIN: {\n    code: \"nonlatin\",\n    flag: \"name:nonlatin\",\n    name: \"Non Latin\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Using the local language generaly (but not always) means that every labels of a given region will use the dominant local language.\n   */\n  LOCAL: {\n    code: null,\n    flag: \"name\",\n    name: \"Local\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n} as const;\n\n/**\n * List of \"country specific\" languages.\n */\nexport const ISOLanguage = {\n  /**\n   * Albanian language\n   */\n  ALBANIAN: {\n    code: \"sq\",\n    flag: \"name:sq\",\n    name: \"Albanian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Amharic language\n   */\n  AMHARIC: {\n    code: \"am\",\n    flag: \"name:am\",\n    name: \"Amharic\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Arabic language (right-to-left script)\n   */\n  ARABIC: {\n    code: \"ar\",\n    flag: \"name:ar\",\n    name: \"Arabic\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Armenian language\n   */\n  ARMENIAN: {\n    code: \"hy\",\n    flag: \"name:hy\",\n    name: \"Armenian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Azerbaijani language\n   */\n  AZERBAIJANI: {\n    code: \"az\",\n    flag: \"name:az\",\n    name: \"Azerbaijani\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Basque language\n   */\n  BASQUE: {\n    code: \"eu\",\n    flag: \"name:eu\",\n    name: \"Basque\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Belarusian langauge\n   */\n  BELARUSIAN: {\n    code: \"be\",\n    flag: \"name:be\",\n    name: \"Belarusian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Bengali language\n   */\n  BENGALI: {\n    code: \"bn\",\n    flag: \"name:bn\",\n    name: \"Bengali\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Bosnian language\n   */\n  BOSNIAN: {\n    code: \"bs\",\n    flag: \"name:bs\",\n    name: \"Bosnian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Breton language\n   */\n  BRETON: {\n    code: \"br\",\n    flag: \"name:br\",\n    name: \"Breton\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Bulgarian language\n   */\n  BULGARIAN: {\n    code: \"bg\",\n    flag: \"bg\",\n    name: \"Bulgarian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Catalan language\n   */\n  CATALAN: {\n    code: \"ca\",\n    flag: \"name:ca\",\n    name: \"Catalan\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Chinese language\n   */\n  CHINESE: {\n    code: \"zh\",\n    flag: \"name:zh\",\n    name: \"Chinese\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Traditional Chinese language\n   */\n  TRADITIONAL_CHINESE: {\n    code: \"zh-Hant\",\n    flag: \"name:zh-Hant\",\n    name: \"Chinese (traditional)\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Simplified Chinese language\n   */\n  SIMPLIFIED_CHINESE: {\n    code: \"zh-Hans\",\n    flag: \"name:zh-Hans\",\n    name: \"Chinese (simplified)\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Corsican language\n   */\n  CORSICAN: {\n    code: \"co\",\n    flag: \"name:co\",\n    name: \"Corsican\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Croatian language\n   */\n  CROATIAN: {\n    code: \"hr\",\n    flag: \"name:hr\",\n    name: \"Croatian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Czech language\n   */\n  CZECH: {\n    code: \"cs\",\n    flag: \"name:cs\",\n    name: \"Czech\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Danish language\n   */\n  DANISH: {\n    code: \"da\",\n    flag: \"name:da\",\n    name: \"Danish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Dutch language\n   */\n  DUTCH: {\n    code: \"nl\",\n    flag: \"name:nl\",\n    name: \"Dutch\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * German language\n   */\n  GERMAN: {\n    code: \"de\",\n    flag: \"name:de\",\n    name: \"German\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Greek language\n   */\n  GREEK: {\n    code: \"el\",\n    flag: \"name:el\",\n    name: \"Greek\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * English language\n   */\n  ENGLISH: {\n    code: \"en\",\n    flag: \"name:en\",\n    name: \"English\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Esperanto language\n   */\n  ESPERANTO: {\n    code: \"eo\",\n    flag: \"name:eo\",\n    name: \"Esperanto\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Estonian language\n   */\n  ESTONIAN: {\n    code: \"et\",\n    flag: \"name:et\",\n    name: \"Estonian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Finnish language\n   */\n  FINNISH: {\n    code: \"fi\",\n    flag: \"name:fi\",\n    name: \"Finnish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * French language\n   */\n  FRENCH: {\n    code: \"fr\",\n    flag: \"name:fr\",\n    name: \"French\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Frisian language\n   */\n  FRISIAN: {\n    code: \"fy\",\n    flag: \"name:fy\",\n    name: \"Frisian (West)\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Georgian language\n   */\n  GEORGIAN: {\n    code: \"ka\",\n    flag: \"name:ka\",\n    name: \"Georgian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Hebrew language (right-to-left non-latin script)\n   */\n  HEBREW: {\n    code: \"he\",\n    flag: \"name:he\",\n    name: \"Hebrew\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Hindi language\n   */\n  HINDI: {\n    code: \"hi\",\n    flag: \"name:hi\",\n    name: \"Hindi\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Hungarian language\n   */\n  HUNGARIAN: {\n    code: \"hu\",\n    flag: \"name:hu\",\n    name: \"Hungarian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Icelandic language\n   */\n  ICELANDIC: {\n    code: \"is\",\n    flag: \"name:is\",\n    name: \"Icelandic\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Indonesian language\n   */\n  INDONESIAN: {\n    code: \"id\",\n    flag: \"name:id\",\n    name: \"Indonesian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Irish language\n   */\n  IRISH: {\n    code: \"ga\",\n    flag: \"name:ga\",\n    name: \"Irish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Italian language\n   */\n  ITALIAN: {\n    code: \"it\",\n    flag: \"name:it\",\n    name: \"Italian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Japanese language\n   */\n  JAPANESE: {\n    code: \"ja\",\n    flag: \"name:ja\",\n    name: \"Japanese\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Japanese language in Hiragana form\n   */\n  JAPANESE_HIRAGANA: {\n    code: \"ja-Hira\",\n    flag: \"name:ja-Hira\",\n    name: \"Japanese Hiragana form\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Japanese language (latin script)\n   */\n  JAPANESE_2018: {\n    code: \"ja-Latn\",\n    flag: \"name:ja-Latn\",\n    name: \"Japanese (Latin 2018)\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Japanese language in Kana form (non-latin script)\n   */\n  JAPANESE_KANA: {\n    code: \"ja_kana\",\n    flag: \"name:ja_kana\",\n    name: \"Japanese (Kana)\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Japanse language, romanized (latin script)\n   */\n  JAPANESE_LATIN: {\n    code: \"ja_rm\",\n    flag: \"name:ja_rm\",\n    name: \"Japanese (Latin script)\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Kannada language\n   */\n  KANNADA: {\n    code: \"kn\",\n    flag: \"name:kn\",\n    name: \"Kannada\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Kazakh language\n   */\n  KAZAKH: {\n    code: \"kk\",\n    flag: \"name:kk\",\n    name: \"Kazakh\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Korean language\n   */\n  KOREAN: {\n    code: \"ko\",\n    flag: \"name:ko\",\n    name: \"Korean\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Korean language (latin script)\n   */\n  KOREAN_LATIN: {\n    code: \"ko-Latn\",\n    flag: \"name:ko-Latn\",\n    name: \"Korean (Latin script)\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Kurdish language\n   */\n  KURDISH: {\n    code: \"ku\",\n    flag: \"name:ku\",\n    name: \"Kurdish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Classical Latin language\n   */\n  CLASSICAL_LATIN: {\n    code: \"la\",\n    flag: \"name:la\",\n    name: \"Latin\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Latvian language\n   */\n  LATVIAN: {\n    code: \"lv\",\n    flag: \"name:lv\",\n    name: \"Latvian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Lithuanian language\n   */\n  LITHUANIAN: {\n    code: \"lt\",\n    flag: \"name:lt\",\n    name: \"Lithuanian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Luxembourgish language\n   */\n  LUXEMBOURGISH: {\n    code: \"lb\",\n    flag: \"name:lb\",\n    name: \"Luxembourgish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Macedonian language\n   */\n  MACEDONIAN: {\n    code: \"mk\",\n    flag: \"name:mk\",\n    name: \"Macedonian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Malayalm language\n   */\n  MALAYALAM: {\n    code: \"ml\",\n    flag: \"name:ml\",\n    name: \"Malayalam\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Maltese language\n   */\n  MALTESE: {\n    code: \"mt\",\n    flag: \"name:mt\",\n    name: \"Maltese\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Norwegian language\n   */\n  NORWEGIAN: {\n    code: \"no\",\n    flag: \"name:no\",\n    name: \"Norwegian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Occitan language\n   */\n  OCCITAN: {\n    code: \"oc\",\n    flag: \"name:oc\",\n    name: \"Occitan\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Persian language\n   */\n  PERSIAN: {\n    code: \"fa\",\n    flag: \"name:fa\",\n    name: \"Persian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Polish language\n   */\n  POLISH: {\n    code: \"pl\",\n    flag: \"name:pl\",\n    name: \"Polish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Portuguese language\n   */\n  PORTUGUESE: {\n    code: \"pt\",\n    flag: \"name:pt\",\n    name: \"Portuguese\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Punjabi language\n   */\n  PUNJABI: {\n    code: \"pa\",\n    flag: \"name:pa\",\n    name: \"Punjabi\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Western Punjabi language\n   */\n  WESTERN_PUNJABI: {\n    code: \"pnb\",\n    flag: \"name:pnb\",\n    name: \"Western Punjabi\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Romanian language\n   */\n  ROMANIAN: {\n    code: \"ro\",\n    flag: \"name:ro\",\n    name: \"Romanian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Romansh language\n   */\n  ROMANSH: {\n    code: \"rm\",\n    flag: \"name:rm\",\n    name: \"Romansh\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Russian language\n   */\n  RUSSIAN: {\n    code: \"ru\",\n    flag: \"name:ru\",\n    name: \"Russian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Serbian language (cyrillic script)\n   */\n  SERBIAN_CYRILLIC: {\n    code: \"sr\",\n    flag: \"name:sr\",\n    name: \"Serbian (Cyrillic script)\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Serbian language (latin script)\n   */\n  SERBIAN_LATIN: {\n    code: \"sr-Latn\",\n    flag: \"name:sr-Latn\",\n    name: \"Serbian (Latin script)\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Scottish Gaelic language\n   */\n  SCOTTISH_GAELIC: {\n    code: \"gd\",\n    flag: \"name:gd\",\n    name: \"Scottish Gaelic\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Slovak language\n   */\n  SLOVAK: {\n    code: \"sk\",\n    flag: \"name:sk\",\n    name: \"Slovak\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Slovene language\n   */\n  SLOVENE: {\n    code: \"sl\",\n    flag: \"name:sl\",\n    name: \"Slovene\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Spanish language\n   */\n  SPANISH: {\n    code: \"es\",\n    flag: \"name:es\",\n    name: \"Spanish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Swedish language\n   */\n  SWEDISH: {\n    code: \"sv\",\n    flag: \"name:sv\",\n    name: \"Swedish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Tamil language\n   */\n  TAMIL: {\n    code: \"ta\",\n    flag: \"name:ta\",\n    name: \"Tamil\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Telugu language\n   */\n  TELUGU: {\n    code: \"te\",\n    flag: \"name:te\",\n    name: \"Telugu\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Thai language\n   */\n  THAI: {\n    code: \"th\",\n    flag: \"name:th\",\n    name: \"Thai\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Turkish language\n   */\n  TURKISH: {\n    code: \"tr\",\n    flag: \"name:tr\",\n    name: \"Turkish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Ukrainian language\n   */\n  UKRAINIAN: {\n    code: \"uk\",\n    flag: \"name:uk\",\n    name: \"Ukrainian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Vietnamese language (latin script)\n   */\n  VIETNAMESE: {\n    code: \"vi\",\n    flag: \"name:vi\",\n    name: \"Vietnamese (Latin script)\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Welsh language\n   */\n  WELSH: {\n    code: \"cy\",\n    flag: \"name:cy\",\n    name: \"Welsh\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n} as const;\n\n/**\n * The complete list of languages\n */\nexport const Language = {\n  ...NonISOLanguage,\n  ...ISOLanguage,\n} as const;\n\n/**\n * Get language infos from a provided language key, the key being the no-whitespace capital name.\n * By default, the language dictionary to look into is the one defined in this library, but another one could be provided\n * Returns `null` if not found.\n */\nexport function getLanguageInfoFromKey(\n  languageKey: string,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): LanguageInfo | null {\n  if (languageKey in languageDictionary) {\n    return languageKey[languageKey];\n  }\n  return null;\n}\n\n/**\n * Get the language info from a provided 2-character iso code.\n * By default, the language dictionary to look into is the one defined in this library, but another one could be provided\n * Returns `null` if not found.\n */\nexport function getLanguageInfoFromCode(\n  languageCode: string,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): LanguageInfo | null {\n  for (const lang of Object.values(languageDictionary)) {\n    if (lang.code === languageCode) {\n      return lang;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the language info from a language flag (e.g. `\"name:en\"`).\n * This is also handy to check is a given language flag is a supported language.\n * By default, the language dictionary to look into is the one defined in this library, but another one could be provided\n * Returns `null` if not found.\n */\nexport function getLanguageInfoFromFlag(\n  languageFlag: string,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): LanguageInfo | null {\n  for (const lang of Object.values(languageDictionary)) {\n    if (lang.flag === languageFlag) {\n      return lang;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the default language of the device, as a LanguageInfo object.\n */\nexport function getAutoLanguage(): LanguageInfo {\n  if (typeof navigator === \"undefined\") {\n    const code = Intl.DateTimeFormat().resolvedOptions().locale.split(\"-\")[0];\n    const langInfo = getLanguageInfoFromCode(code);\n    return langInfo ?? Language.ENGLISH;\n  }\n\n  const canditatelangs = Array.from(\n    new Set(navigator.languages.map((l) => l.split(\"-\")[0])),\n  )\n    .map((code) => getLanguageInfoFromCode(code))\n    .filter((li) => li);\n\n  return canditatelangs[0] ?? Language.ENGLISH;\n}\n\nexport function isLanguageInfo(obj: unknown): obj is LanguageInfo {\n  return (\n    obj !== null &&\n    typeof obj === \"object\" &&\n    \"code\" in obj &&\n    \"flag\" in obj &&\n    \"name\" in obj &&\n    \"latin\" in obj &&\n    \"isMode\" in obj &&\n    \"geocoding\" in obj &&\n    (typeof obj.code === \"string\" || obj.code === null) &&\n    typeof obj.flag === \"string\" &&\n    typeof obj.name === \"string\" &&\n    typeof obj.latin === \"boolean\" &&\n    typeof obj.isMode === \"boolean\" &&\n    typeof obj.geocoding === \"boolean\"\n  );\n}\n\n/**\n * By default, the language dictionary to look into is the one defined in this library, but another one could be provided\n */\nexport function toLanguageInfo(\n  lang: LanguageInfo | string,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): LanguageInfo | null {\n  // Could be directly an object of type LanguageInfo\n  if (isLanguageInfo(lang)) {\n    // Yet we want to make sure the provided languageInfo obj is not corrupted or incomplete,\n    // so we ask for the equivalent original:\n    return getLanguageInfoFromFlag(lang.flag, languageDictionary); // possibly returns null, which is fine.\n  }\n\n  // If it's not even a string, then it does not represent a language\n  if (typeof lang !== \"string\") {\n    return null;\n  }\n\n  return (\n    getLanguageInfoFromKey(lang, languageDictionary) ||\n    getLanguageInfoFromCode(lang, languageDictionary) ||\n    getLanguageInfoFromFlag(lang, languageDictionary) ||\n    null\n  );\n}\n\n/**\n * Tells if two languages are the same, even though possibly provided under different forms.\n * Note: this is not comparing object references, but values.\n */\nexport function areSameLanguages(\n  langA: string | LanguageInfo,\n  langB: string | LanguageInfo,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): boolean {\n  const langAObj = toLanguageInfo(langA, languageDictionary);\n  const langBObj = toLanguageInfo(langB, languageDictionary);\n\n  return langAObj && langBObj && langAObj.flag === langBObj.flag;\n}\n","import { config } from \"./config\";\n\nexport async function callFetch(resource, options = {}) {\n  if (config.fetch === null) {\n    throw new Error(\n      \"The fetch function was not found. If on NodeJS < 18 please specify the fetch function with config.fetch\",\n    );\n  }\n\n  //  Control if URL contains the api key\n  if (new URL(resource).searchParams.get(\"key\").trim() === \"\") {\n    throw new Error(\n      \"The MapTiler Cloud API key is missing. Set it in `config.apiKey` or get one for free at https://maptiler.com\",\n    );\n  }\n\n  return config.fetch(resource, options);\n}\n","/**\n * Some default settings for the SDK\n */\nconst defaults = {\n  maptilerApiURL: \"https://api.maptiler.com/\",\n  mapStyle: \"streets-v2\",\n};\n\nObject.freeze(defaults);\n\nexport { defaults };\n","/**\n * A ServiceError is an Error that includes the HTTP response details\n */\nexport class ServiceError extends Error {\n  constructor(\n    public res: Response,\n    customMessage = \"\",\n  ) {\n    super(\n      `Call to enpoint ${res.url} failed with the status code ${res.status}. ${customMessage}`,\n    );\n  }\n}\n","import type { BBox, Feature, Geometry, Position } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\n\nimport {\n  type LanguageInfo,\n  getAutoLanguage,\n  getLanguageInfoFromCode,\n  isLanguageInfo,\n  Language,\n  getLanguageInfoFromFlag,\n} from \"../language\";\n\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  400: \"Query too long / Invalid parameters\",\n  403: \"Key is missing, invalid or restricted\",\n};\n\nexport type LanguageGeocodingOptions = {\n  /**\n   * Prefer results in specific language. It’s possible to specify multiple values.\n   */\n  language?: string | Array<string> | LanguageInfo | Array<LanguageInfo>;\n};\n\nexport type GeocodingPlaceType =\n  | \"continental_marine\"\n  | \"country\"\n  | \"major_landform\"\n  | \"region\"\n  | \"subregion\"\n  | \"county\"\n  | \"joint_municipality\"\n  | \"joint_submunicipality\"\n  | \"municipality\"\n  | \"municipal_district\"\n  | \"locality\"\n  | \"neighbourhood\"\n  | \"place\"\n  | \"postal_code\"\n  | \"address\"\n  | \"road\"\n  | \"poi\";\n\nexport type CommonForwardAndReverseGeocodingOptions =\n  LanguageGeocodingOptions & {\n    /**\n     * Custom MapTiler Cloud API key to use instead of the one in global `config`.\n     */\n    apiKey?: string;\n\n    /**\n     * Maximum number of results to show. Must be between 1 and 10.\n     * For reverse geocoding with multiple `types` this must not be set or must be set to 1.\n     * Default is 5 for forward and 1 for reverse geocoding.\n     */\n    limit?: number;\n\n    /**\n     * Features of specified types to query.\n     * If not specified, feature of all available types except `poi` and `major_landform` will be queried (`types = [\"poi\", \"major_landform\"]`, `excludeTypes = true`).\n     * In case of reverse geocoding if just a single type is specified, then multiple nearby features of the single type can be returned,\n     * otherwise single feature for every specified type (or default types) can be returned.\n     */\n    types?: GeocodingPlaceType[];\n\n    /**\n     * Set to `true` to use all available feature types except those mentioned in `types`. Default value is `false` if `types` is specified.\n     */\n    excludeTypes?: boolean;\n  };\n\nexport type GeocodingOptions = CommonForwardAndReverseGeocodingOptions & {\n  /**\n   * Only search for results in the specified area.\n   */\n  bbox?: BBox;\n\n  /**\n   * Prefer results close to a specific location.\n   */\n  proximity?: Position | \"ip\";\n\n  /**\n   * Limit search to specific country/countries specified as list of Alpha-2 ISO 3166-1 codes.\n   */\n  country?: string[];\n\n  /**\n   * Set to `false` to disable fuzzy (typo-tolerant) search. Default is `true`.\n   */\n  fuzzyMatch?: boolean;\n\n  /**\n   * Set to `true` to use autocomplete, `false` to disable it. Default is `true`.\n   */\n  autocomplete?: boolean;\n};\n\nexport type ReverseGeocodingOptions = CommonForwardAndReverseGeocodingOptions;\n\nexport type ByIdGeocodingOptions = LanguageGeocodingOptions & {\n  apiKey?: string;\n};\n\nexport type Coordinates = Position;\n\ntype FeatureProperties = {\n  /**\n   * External reference of the feature used for debugging purposes\n   */\n  ref: string;\n\n  /**\n   * ISO 3166-1 alpha-2 country code of the feature\n   */\n  country_code: string;\n\n  /**\n   * (experimental) Kind of the feature\n   */\n  kind?:\n    | \"road\"\n    | \"road_relation\"\n    | \"admin_area\"\n    | \"place\"\n    | \"street\"\n    | \"virtual_street\";\n\n  /**\n   * (experimental) Value of place=* tag from OpenStreetMap feature if kind=place\n   */\n  \"osm:place_type\"?: string;\n\n  /**\n   * (experimental) Feature tags from OpenStreetMap. Only available for `poi` type.\n   */\n  \"osm:tags\"?: Record<string, string>;\n\n  /**\n   * Array of POI categories. Only available for `poi` type.\n   */\n  categories?: string[];\n\n  /**\n   * Wikidata identifier.\n   */\n  wikidata?: string;\n};\n\ntype FeatureBase = {\n  /**\n   * Unique feature ID\n   */\n  id: string;\n\n  /**\n   * Localized feature name\n   */\n  text: string;\n\n  /**\n   * Query's primary ISO 639-1 language code\n   */\n  language?: string;\n\n  /**\n   * A string analogous to the `text` field that matches the query in the requested language.\n   * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n   */\n  [text: `text_${string}`]: string;\n\n  /**\n   * A ISO 639-1 query's fallback language code.\n   * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n   */\n  [language: `language_${string}`]: string;\n};\n\nexport type FeatureHierarchy = FeatureProperties & FeatureBase;\n\nexport type GeocodingFeature = Feature<Geometry, FeatureProperties> &\n  FeatureBase & {\n    /**\n     * Bounding box of the original feature as [w, s, e, n] array\n     */\n    bbox: BBox;\n\n    /**\n     * A [lon, lat] array of the original feature centeroid\n     */\n    center: Coordinates;\n\n    /**\n     * Formatted (including the hierarchy) and localized feature full name\n     */\n    place_name: string;\n\n    /**\n     * A string analogous to the `place_name` field that matches the query in the requested language.\n     * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n     */\n    [key: `place_name_${string}`]: string;\n\n    /**\n     * An array of feature types describing the feature.\n     * Currently each feature has only single type but this may change in the future.\n     */\n    place_type: GeocodingPlaceType[];\n\n    /**\n     * Localized type of the place name, matches `place_type` property\n     */\n    place_type_name: string[];\n\n    /**\n     * Feature hierarchy\n     */\n    context?: Array<FeatureHierarchy>;\n\n    /**\n     * Address number, if applicable\n     */\n    address?: string;\n\n    /**\n     * Indicates how well the returned feature matches the user's query on a scale from 0 to 1.\n     * 0 means the result does not match the query text at all, while 1 means the result fully matches the query text.\n     * You can use the relevance property to remove results that don't fully match the query.\n     */\n    relevance: number;\n\n    /**\n     * A string analogous to the `text` field that more closely matches the query than results in the specified language.\n     * For example, querying _Praha, Czechia_ with language set to English (`en`) might return a feature with the `text` _Prague_ and the `matching_text` _Praha_.\n     */\n    matching_text?: string;\n\n    /**\n     * A string analogous to the `place_name` field that more closely matches the query than results in the specified language.\n     * For example, querying _Praha, Czechia_ with language set to English (`en`) might return a feature with the `place_name` _Prague, Czechia_ and a `matching_place_name` of _Praha, Czechia_.\n     */\n    matching_place_name?: string;\n  };\n\nexport type GeocodingSearchResult = {\n  type: \"FeatureCollection\";\n\n  /**\n   * Array of features found\n   */\n  features: Array<GeocodingFeature>;\n\n  /**\n   * Tokenized search query\n   */\n  query: Array<string>;\n\n  /**\n   * Attribution of the result\n   */\n  attribution: string;\n};\n\nfunction addLanguageGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: LanguageGeocodingOptions,\n) {\n  const { language } = options;\n\n  if (language === undefined) {\n    return;\n  }\n\n  // Making it an array of language codes\n  const languageCodes = (Array.isArray(language) ? language : [language])\n    .map((elem) => toValidGeocodingLanguageCode(elem))\n    .filter((elem) => elem); // removing the nulls\n\n  const languages = Array.from(new Set(languageCodes)).join(\",\");\n\n  searchParams.set(\"language\", languages);\n}\n\nfunction toValidGeocodingLanguageCode(\n  lang: string | LanguageInfo,\n): string | null {\n  const langInfo =\n    lang === Language.AUTO.flag\n      ? getAutoLanguage()\n      : typeof lang === \"string\"\n      ? getLanguageInfoFromCode(lang)\n      : isLanguageInfo(lang)\n      ? lang.flag === Language.AUTO.flag\n        ? getAutoLanguage()\n        : getLanguageInfoFromFlag(lang.flag)\n      : null;\n\n  return langInfo?.geocoding ? langInfo.code : null;\n}\n\nfunction addCommonForwardAndReverseGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: CommonForwardAndReverseGeocodingOptions,\n) {\n  const { apiKey, limit, types, excludeTypes } = options;\n\n  searchParams.set(\"key\", apiKey ?? config.apiKey);\n\n  if (limit !== undefined) {\n    searchParams.set(\"limit\", String(limit));\n  }\n\n  if (types !== undefined) {\n    searchParams.set(\"types\", types.join(\",\"));\n  }\n\n  if (excludeTypes !== undefined) {\n    searchParams.set(\"excludeTypes\", String(excludeTypes));\n  }\n\n  addLanguageGeocodingOptions(searchParams, options);\n}\n\nfunction addForwardGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: GeocodingOptions,\n) {\n  addCommonForwardAndReverseGeocodingOptions(searchParams, options);\n\n  const { bbox, proximity, country, fuzzyMatch, autocomplete } = options;\n\n  if (bbox !== undefined) {\n    searchParams.set(\"bbox\", bbox.join(\",\"));\n  }\n\n  if (proximity !== undefined) {\n    searchParams.set(\n      \"proximity\",\n      proximity === \"ip\" ? proximity : proximity.join(\",\"),\n    );\n  }\n\n  if (country !== undefined) {\n    searchParams.set(\"country\", country.join(\",\"));\n  }\n\n  if (fuzzyMatch !== undefined) {\n    searchParams.set(\"fuzzyMatch\", fuzzyMatch ? \"true\" : \"false\");\n  }\n\n  if (autocomplete !== undefined) {\n    searchParams.set(\"autocomplete\", autocomplete ? \"true\" : \"false\");\n  }\n}\n\n/**\n * Performs a forward geocoding query to MapTiler API.\n * Providing a human readable place name (of a city, country, street, etc.), the function returns\n * a list of candidate locations including longitude and latitude.\n *\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-name-forward\n *\n * @param query\n * @param options\n * @returns\n */\nasync function forward(\n  query: string,\n  options: GeocodingOptions = {},\n): Promise<GeocodingSearchResult> {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `geocoding/${encodeURIComponent(query)}.json`,\n    defaults.maptilerApiURL,\n  );\n\n  addForwardGeocodingOptions(endpoint.searchParams, options);\n\n  const res = await callFetch(endpoint.toString());\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  return await res.json();\n}\n\n/**\n * Perform a reverse geocoding query to MapTiler API.\n * Providing a longitude and latitude, this function returns a set of human readable information about this place (country, city, street, etc.)\n *\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-coordinates-reverse\n *\n * @param position\n * @param options\n * @returns\n */\nasync function reverse(\n  position: Position,\n  options: ReverseGeocodingOptions = {},\n): Promise<GeocodingSearchResult> {\n  if (!Array.isArray(position) || position.length < 2) {\n    throw new Error(\"The position must be an array of form [lng, lat].\");\n  }\n\n  const endpoint = new URL(\n    `geocoding/${position[0]},${position[1]}.json`,\n    defaults.maptilerApiURL,\n  );\n\n  addCommonForwardAndReverseGeocodingOptions(endpoint.searchParams, options);\n\n  const res = await callFetch(endpoint.toString());\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  return await res.json();\n}\n\n/**\n * Perform a geocoding query to MapTiler API to obtain fature by its ID.\n * Providing a feature ID, this function returns a feature which includes its full geometry.\n * Note that the feature ID is not stable and it changes when the database is re-indexed.\n *\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-feature-id\n *\n * @param id\n * @param options\n * @returns\n */\nasync function byId(\n  id: string,\n  options: ByIdGeocodingOptions = {},\n): Promise<GeocodingSearchResult> {\n  const endpoint = new URL(`geocoding/${id}.json`, defaults.maptilerApiURL);\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  addLanguageGeocodingOptions(endpoint.searchParams, options);\n\n  const res = await callFetch(endpoint.toString());\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  return await res.json();\n}\n\n/**\n * Perform a batch geocoding query to MapTiler API.\n * Provide multiple queries in the array. Each query can be forward, reverse or by feature ID.\n *\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#batch-geocoding\n *\n * @param queries\n * @param options\n * @returns\n */\nasync function batch(\n  queries: string[],\n  options: GeocodingOptions = {},\n): Promise<GeocodingSearchResult[]> {\n  if (!queries.length) {\n    return [];\n  }\n\n  const joinedQuery = queries\n    .map((query) => encodeURIComponent(query))\n    .join(\";\");\n\n  const endpoint = new URL(\n    `geocoding/${joinedQuery}.json`,\n    defaults.maptilerApiURL,\n  );\n\n  addForwardGeocodingOptions(endpoint.searchParams, options);\n\n  const res = await callFetch(endpoint.toString());\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj = await res.json();\n\n  return queries.length === 1 ? [obj] : obj;\n}\n\n/**\n * The **geocoding** namespace contains asynchronous functions to call the [MapTiler Geocoding API](https://docs.maptiler.com/cloud/api/geocoding/).\n * The **Geocoding API** provides ways to get geographic coordinates from a human-readable search query of a place (forward geocoding)\n * and to get the location details (country, city, street, etc.) from a geographic coordinate (reverse geocoding);\n */\nconst geocoding = {\n  forward,\n  reverse,\n  byId,\n  batch,\n};\n\nexport { geocoding };\n","import { BBox } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Options that can be provided to get user data.\n */\nexport type GeolocationInfoOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n};\n\nexport type GeolocationResult = {\n  /**\n   * Name of the country\n   * Example: Switzerland\n   */\n  country?: string;\n\n  /**\n   * Two-letter code of the country ISO 3166-1 alpha-2 codes\n   * Example: CH\n   */\n  country_code?: string;\n\n  /**\n   * Bounds of the country in WGS84 degrees [west, south, east, north].\n   * Example: [5.95538,45.818852,10.490936,47.809357]\n   */\n  country_bounds?: BBox;\n\n  /**\n   * Official country languages in ISO 639-1 format. ISO 639-1 codes\n   * Example: [\"de\",\"fr\",\"it\"]\n   */\n  country_languages?: Array<string>;\n\n  /**\n   * Name of the continent\n   * Example: Europe\n   */\n  continent?: string;\n\n  /**\n   * Two-letter code of the continent\n   * Example: EU\n   */\n  continent_code?: string;\n\n  /**\n   * Indicated whether the country is part of the European Union.\n   */\n  eu?: boolean;\n\n  /**\n   * Name of the city\n   * Example: Zurich\n   */\n  city?: string;\n\n  /**\n   * Latitude of the location\n   * Example: 47.36667\n   */\n  latitude?: number;\n\n  /**\n   * Longitude of the location\n   * Example: 8.55\n   */\n  longitude?: number;\n\n  /**\n   * Postal code\n   * Example: 8000\n   */\n  postal?: string;\n\n  /**\n   * If known, the ISO 3166-2 name for the first level region. ISO 3166-2 codes\n   * Example: Zurich\n   */\n  region?: string;\n\n  /**\n   * If known, the ISO 3166-2 code for the first level region. ISO 3166-2 codes\n   * Example: ZH\n   */\n  region_code?: string;\n\n  /**\n   * Name of the timezone\n   * Example: Europe/Zurich\n   */\n  timezone?: string;\n};\n\n/**\n * Looks up geolocation details from IP address using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geolocation/#ip-geolocation\n * @returns\n */\nasync function info(\n  options: GeolocationInfoOptions = {},\n): Promise<GeolocationResult> {\n  const endpoint = new URL(`geolocation/ip.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj as GeolocationResult;\n}\n\n/**\n * The **geolocation** namespace contains an asynchronous function to call the [MapTiler Geolocation API](https://docs.maptiler.com/cloud/api/geolocation/).\n * The **Geolocation API** provides a way to retrieve the IP address as well as geographic informations of a machine performing the query (most likely: a user)\n */\nconst geolocation = {\n  info,\n};\n\nexport { geolocation };\n","import { BBox, Position } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\nexport type CoordinatesSearchOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Maximum number of results returned (default: 10)\n   */\n  limit?: number;\n\n  /**\n   *  Show detailed transformations for each CRS (default: false)\n   */\n  transformations?: boolean;\n\n  /**\n   * Show exports in WKT and Proj4 notations (default: false)\n   */\n  exports?: boolean;\n};\n\nexport type CoordinateId = {\n  authority: string;\n  code: BigInteger;\n};\n\nexport type CoordinateExport = {\n  proj4: string;\n  wkt: string;\n};\n\nexport type CoordinateGrid = {\n  path: string;\n};\n\nexport type CoordinateTransformation = {\n  id: CoordinateId;\n  name: string;\n  reversible: boolean;\n  usable: boolean;\n  deprecated: boolean;\n  grids: Array<CoordinateGrid>;\n  accuracy?: number;\n  area?: string;\n  bbox?: BBox;\n  target_crs?: CoordinateId;\n  unit?: string;\n};\n\nexport type CoordinateSearch = {\n  id: CoordinateId;\n\n  name: string;\n\n  kind: string;\n\n  deprecated: boolean;\n\n  transformations?: Array<CoordinateTransformation | number>;\n\n  accuracy?: number;\n\n  unit?: string;\n\n  area?: string;\n\n  /**\n   * Bounding box of the resource in [min_lon, min_lat, max_lon, max_lat] order.\n   */\n  bbox?: BBox;\n\n  /**\n   * Most suitable transformation for this CRS.\n   */\n  default_transformation?: DefaultTransformation;\n\n  exports: CoordinateExport;\n};\n\nexport type DefaultTransformation = {\n  authority: string;\n  code: number;\n};\n\nexport type CoordinateSearchResult = {\n  /**\n   * The coordinate search results\n   */\n  results: Array<CoordinateSearch>;\n\n  /**\n   * The number of results\n   */\n  total: number;\n};\n\n/**\n * Search information about coordinate systems using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#search-coordinate-systems\n * @param query Can be any kind of CRS by name or code\n * @param options\n * @returns\n */\nasync function search(\n  query: string,\n  options: CoordinatesSearchOptions = {},\n): Promise<CoordinateSearchResult> {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `coordinates/search/${query}.json`,\n    defaults.maptilerApiURL,\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (\"limit\" in options) {\n    endpoint.searchParams.set(\"limit\", options.limit.toString());\n  }\n\n  if (\"transformations\" in options) {\n    endpoint.searchParams.set(\n      \"transformations\",\n      options.transformations.toString(),\n    );\n  }\n\n  if (\"exports\" in options) {\n    endpoint.searchParams.set(\"exports\", options.exports.toString());\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj as CoordinateSearchResult;\n}\n\nexport type XYZ = {\n  x?: number;\n  y?: number;\n  z?: number;\n};\n\nexport type CoordinateTransformResult = {\n  results: Array<XYZ>;\n\n  /**\n   * Transformations are selected using given ops parameter.\n   * If no parameter is given, auto strategy is used.\n   * If given, it may try to use a listed transformation,\n   * then fallback to towgs84 patching, and finally boundcrs.\n   */\n  transformer_selection_strategy: string;\n};\n\n/**\n * Options that can be provided when transforming a coordinate from one CRS to another.\n */\nexport type CoordinatesTransformOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Source coordinate reference system (default: 4326)\n   */\n  sourceCrs?: number;\n\n  /**\n   * Target coordinate reference system (default: 4326)\n   */\n  targetCrs?: number;\n\n  /**\n   * List of codes of operations\n   */\n  operations?: number | Array<number>;\n};\n\n/**\n * Transforms coordinates from a source reference system to a target reference system using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#transform-coordinates\n * @param positions\n * @param options\n * @returns\n */\nasync function transform(\n  positions: Position | Array<Position>,\n  options: CoordinatesTransformOptions = {},\n): Promise<CoordinateTransformResult> {\n  const coordinatesStr = (Array.isArray(positions[0]) ? positions : [positions])\n    .map((coord) => `${coord[0]},${coord[1]}`)\n    .join(\";\");\n\n  const endpoint = new URL(\n    `coordinates/transform/${coordinatesStr}.json`,\n    defaults.maptilerApiURL,\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (\"sourceCrs\" in options) {\n    endpoint.searchParams.set(\"s_srs\", options.sourceCrs.toString());\n  }\n\n  if (\"targetCrs\" in options) {\n    endpoint.searchParams.set(\"t_srs\", options.targetCrs.toString());\n  }\n\n  if (\"operations\" in options) {\n    endpoint.searchParams.set(\n      \"ops\",\n      (Array.isArray(options.operations)\n        ? options.operations\n        : [options.operations]\n      ).join(\"|\"),\n    );\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj as CoordinateTransformResult;\n}\n\n/**\n * The **coordinate** namespace contains asynchronous functions to call the [MapTiler Coordinate API](https://docs.maptiler.com/cloud/api/coordinates/).\n * The goal of the **Coordinate API* is query information about spatial coordinate reference system (CRS) as well as to transform coordinates from one CRS to another.\n */\nconst coordinates = {\n  search,\n  transform,\n};\n\nexport { coordinates };\n","import { FeatureCollection } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Options that can be provided to get user data.\n */\nexport type GetDataOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n};\n\n/**\n * Get user data and returns it as GeoJSON using the MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/data/#geojson\n * @param dataId\n * @returns\n */\nasync function get(\n  dataId: string,\n  options: GetDataOptions = {},\n): Promise<FeatureCollection> {\n  if (typeof dataId !== \"string\" || dataId.trim().length === 0) {\n    throw new Error(\"The data ID must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `data/${encodeURIComponent(dataId)}/features.json`,\n    defaults.maptilerApiURL,\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\n/**\n * The **data** namespace contains an asynchronous function to call the [MapTiler Data API](https://docs.maptiler.com/cloud/api/data/).\n * The **Data API** provides a way to retrieve user data in GeoJSON format.\n */\nconst data = {\n  get,\n};\n\nexport { data };\n","/**\n * Expand the map style provided as argument of the Map constructor\n * @param style\n * @returns\n */\nexport function expandMapStyle(style): string {\n  // testing if the style provided is of form \"maptiler://some-style\"\n  const maptilerDomainRegex = /^maptiler:\\/\\/(.*)/;\n  let match;\n  const trimmed = style.trim();\n  let expandedStyle;\n\n  // The style was possibly already given as expanded URL\n  if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n    expandedStyle = trimmed;\n  } else if ((match = maptilerDomainRegex.exec(trimmed)) !== null) {\n    expandedStyle = `https://api.maptiler.com/maps/${match[1]}/style.json`;\n  } else {\n    // The style could also possibly just be the name of the style without any URI style\n    expandedStyle = `https://api.maptiler.com/maps/${trimmed}/style.json`;\n  }\n\n  return expandedStyle;\n}\n\n/**\n * Type for object containing style details\n */\nexport type MapStylePreset = {\n  referenceStyleID: string;\n  name: string;\n  description: string;\n  variants: Array<{\n    deprecated?: boolean;\n    id: string;\n    name: string;\n    variantType: string;\n    description: string;\n    imageURL: string;\n  }>;\n};\n\n/**\n * An instance of MapStyleVariant contains information about a style to use that belong to a reference style\n */\nexport class MapStyleVariant {\n  constructor(\n    /**\n     * Human-friendly name\n     */\n    private name: string,\n\n    /**\n     * Variant name the variant is addressed to from its reference style: `MapStyle.REFERNCE_STYLE_NAME.VARIANT_TYPE`\n     */\n    private variantType: string,\n\n    /**\n     * MapTiler Cloud id\n     */\n    private id: string,\n\n    /**\n     * Reference map style, used to retrieve sibling variants\n     */\n    private referenceStyle: ReferenceMapStyle,\n\n    /**\n     * Human-friendly description\n     */\n    private description: string,\n\n    /**\n     * URL to an image describing the style variant\n     */\n    private imageURL: string,\n\n    /**\n     * Whether this variant is deprecated or not\n     */\n    public deprecated: boolean = false,\n  ) {}\n\n  /**\n   * Get the human-friendly name\n   * @returns\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  getFullName(): string {\n    return `${this.referenceStyle.getName()} ${this.name}`;\n  }\n\n  /**\n   * Get the variant type (eg. \"DEFAULT\", \"DARK\", \"PASTEL\", etc.)\n   * @returns\n   */\n  getType(): string {\n    return this.variantType;\n  }\n\n  /**\n   * Get the MapTiler Cloud id\n   * @returns\n   */\n  getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Get the human-friendly description\n   */\n  getDescription(): string {\n    return this.description;\n  }\n\n  /**\n   * Get the reference style this variant belongs to\n   * @returns\n   */\n  getReferenceStyle(): ReferenceMapStyle {\n    return this.referenceStyle;\n  }\n\n  /**\n   * Check if a variant of a given type exists for _this_ variants\n   * (eg. if this is a \"DARK\", then we can check if there is a \"LIGHT\" variant of it)\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType: string): boolean {\n    return this.referenceStyle.hasVariant(variantType);\n  }\n\n  /**\n   * Retrieve the variant of a given type. If not found, will return the \"DEFAULT\" variant.\n   * (eg. _this_ \"DARK\" variant does not have any \"PASTEL\" variant, then the \"DEFAULT\" is returned)\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType: string): MapStyleVariant {\n    const variant = this.referenceStyle.getVariant(variantType);\n    this.warnIfDeprecated(variant);\n    return variant;\n  }\n\n  /**\n   * Get all the variants for _this_ variants, except _this_ current one\n   * @returns\n   */\n  getVariants(): Array<MapStyleVariant> {\n    return this.referenceStyle\n      .getVariants()\n      .filter((v) => v !== this)\n      .map((v) => {\n        this.warnIfDeprecated(v);\n        return v;\n      });\n  }\n\n  /**\n   * Get the image URL that represent _this_ variant\n   * @returns\n   */\n  getImageURL(): string {\n    return this.imageURL;\n  }\n\n  /**\n   * Get the style as usable by MapLibre, a string (URL) or a plain style description (StyleSpecification)\n   * @returns\n   */\n  getExpandedStyleURL(): string {\n    return expandMapStyle(this.getId());\n  }\n\n  warnIfDeprecated(variant: MapStyleVariant = this): MapStyleVariant {\n    if (!variant.deprecated) return variant;\n\n    const name = variant.getFullName();\n\n    console.warn(\n      `Style \"${name}\" is deprecated and will be removed in a future version.`,\n    );\n\n    return variant;\n  }\n}\n\n/**\n * An instance of reference style contains a list of StyleVariants ordered by relevance\n */\nexport class ReferenceMapStyle {\n  /**\n   * Variants that belong to this reference style, key being the reference type\n   */\n  private variants: { [key: string]: MapStyleVariant } = {};\n\n  /**\n   * Variants that belong to this reference style, ordered by relevance\n   */\n  private orderedVariants: Array<MapStyleVariant> = [];\n\n  constructor(\n    /**\n     * Human-friendly name of this reference style\n     */\n    private name: string,\n\n    /**\n     * ID of this reference style\n     */\n    private id: string,\n  ) {}\n\n  /**\n   * Get the human-friendly name of this reference style\n   * @returns\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  /**\n   * Get the id of _this_ reference style\n   * @returns\n   */\n  getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Add a variant to _this_ reference style\n   * @param v\n   */\n  addVariant(v: MapStyleVariant) {\n    this.variants[v.getType()] = v;\n    this.orderedVariants.push(v);\n  }\n\n  /**\n   * Check if a given variant type exists for this reference style\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType: string): boolean {\n    return variantType in this.variants;\n  }\n\n  /**\n   * Get a given variant. If the given type of variant does not exist for this reference style,\n   * then the most relevant default variant is returned instead\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType: string): MapStyleVariant {\n    return variantType in this.variants\n      ? this.variants[variantType]\n      : this.orderedVariants[0];\n  }\n\n  /**\n   * Get the list of variants for this reference style\n   * @returns\n   */\n  getVariants(): Array<MapStyleVariant> {\n    return Object.values(this.variants);\n  }\n\n  /**\n   * Get the defualt variant for this reference style\n   * @returns\n   */\n  getDefaultVariant(): MapStyleVariant {\n    return this.orderedVariants[0].warnIfDeprecated();\n  }\n}\n\n/**\n * All the styles and variants maintained by MapTiler.\n */\nexport type MapStyleType = {\n  /**\n   * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings\n   */\n  STREETS: ReferenceMapStyle & {\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings.\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in dark mode.\n     */\n    DARK: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in light mode.\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in blue night mode.\n     */\n    NIGHT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, with a pastel color palette.\n     */\n    PASTEL: MapStyleVariant;\n  };\n\n  /**\n   * Suitable for outdoor activities. With elevation isolines and hillshading.\n   */\n  OUTDOOR: ReferenceMapStyle & {\n    /**\n     * Suitable for outdoor activities. With elevation isolines and hillshading.\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     * Suitable for outdoor activities. With elevation isolines and hillshading, in dark mode.\n     */\n    DARK: MapStyleVariant;\n  };\n\n  /**\n   * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading.\n   */\n  WINTER: ReferenceMapStyle & {\n    /**\n     * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading.\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading, in dark mode.\n     */\n    DARK: MapStyleVariant;\n  };\n\n  /**\n   * High resolution imagery only, without any label.\n   */\n  SATELLITE: ReferenceMapStyle & {\n    /**\n     * High resolution imagery only, without any label.\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * High resolution imagery with labels, political borders and roads.\n   */\n  HYBRID: ReferenceMapStyle & {\n    /**\n     * High resolution imagery with labels, political borders and roads.\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * A minimalist street-oriented style without POI\n   */\n  BASIC: ReferenceMapStyle & {\n    /**\n     * A minimalist street-oriented style without POI\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A minimalist street-oriented style without POI, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A minimalist street-oriented style without POI, in light mode\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  /**\n   * A bright street-oriented style, a nice alternative to `streets`\n   */\n  BRIGHT: ReferenceMapStyle & {\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, in light mode\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, with a soft pastel color palette\n     */\n    PASTEL: MapStyleVariant;\n  };\n\n  /**\n   * Classic OpenStreetMap style\n   */\n  OPENSTREETMAP: ReferenceMapStyle & {\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n   */\n  TOPO: ReferenceMapStyle & {\n    /**\n     * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A nice high-contrast, and high saturation alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    SHINY: MapStyleVariant;\n    /**\n     * A nice low-contrast, alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details, using a soft pastel color palette\n     */\n    PASTEL: MapStyleVariant;\n\n    /**\n     * A nice very high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    TOPOGRAPHIQUE: MapStyleVariant;\n  };\n\n  /**\n   * A nice alternative to `streets` with a soft color palette\n   */\n  VOYAGER: ReferenceMapStyle & {\n    /**\n     * A nice alternative to `streets` with a soft color palette\n     *\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A nice alternative to `streets`, in very dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A nice alternative to `streets`, in light mode\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * A nice alternative to `streets` with a soft sepia color palette and vintage look\n     */\n    VINTAGE: MapStyleVariant;\n  };\n\n  /**\n   * A bold very high contrast black and white (no gray!) style for the city\n   */\n  TONER: ReferenceMapStyle & {\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city, without any label\n     */\n    BACKGROUND: MapStyleVariant;\n    /**\n     * A bold very high contrast, yet faded, style for the city\n     */\n    LITE: MapStyleVariant;\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city, with no building, only roads!\n     */\n    LINES: MapStyleVariant;\n  };\n\n  /**\n   * Minimalist style, perfect for data visualization\n   */\n  DATAVIZ: ReferenceMapStyle & {\n    /**\n     *  Minimalist style, perfect for data visualization\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     *  Minimalist style, perfect for data visualization in dark mode\n     */\n    DARK: MapStyleVariant;\n\n    /**\n     *  Minimalist style, perfect for data visualization in light mode\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  /**\n   * Explore deep see trenches and mountains, with isolines and depth labels\n   */\n  OCEAN: ReferenceMapStyle & {\n    /**\n     * Explore deep see trenches and mountains, with isolines and depth labels\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * Neutral greyscale style with hillshading suitable for colorful terrain-aware visualization\n   */\n  BACKDROP: ReferenceMapStyle & {\n    /**\n     *  Neutral greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     *  Dark greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    DARK: MapStyleVariant;\n\n    /**\n     *  Light greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  LANDSCAPE: ReferenceMapStyle & {\n    /**\n     *  Light terrain map for data overlays and visualisations\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     *  Dark terrain map for data overlays and visualisations\n     */\n    DARK: MapStyleVariant;\n    /**\n     *  Vivid terrain map for data overlays and visualisations\n     */\n    VIVID: MapStyleVariant;\n  };\n  /**\n   *  Watercolor map for creative use\n   */\n  AQUARELLE: ReferenceMapStyle & {\n    /**\n     *  Watercolor map for creative use\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     *  Dark watercolor map for creative use\n     */\n    DARK: MapStyleVariant;\n    /**\n     *  Vivid watercolor map for creative use\n     */\n    VIVID: MapStyleVariant;\n  };\n};\n\nexport const mapStylePresetList: Array<MapStylePreset> = [\n  {\n    referenceStyleID: \"STREETS\",\n    name: \"Streets\",\n    description: \"\",\n    variants: [\n      {\n        id: \"streets-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-night\",\n        name: \"Night\",\n        variantType: \"NIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OUTDOOR\",\n    name: \"Outdoor\",\n    description: \"\",\n    variants: [\n      {\n        id: \"outdoor-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"outdoor-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"WINTER\",\n    name: \"Winter\",\n    description: \"\",\n    variants: [\n      {\n        id: \"winter-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"winter-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"SATELLITE\",\n    name: \"Satellite\",\n    description: \"\",\n    variants: [\n      {\n        id: \"satellite\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"HYBRID\",\n    name: \"Hybrid\",\n    description: \"\",\n    variants: [\n      {\n        id: \"hybrid\",\n        deprecated: true,\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BASIC\",\n    name: \"Basic\",\n    description: \"\",\n    variants: [\n      {\n        id: \"basic-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"basic-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"basic-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BRIGHT\",\n    name: \"Bright\",\n    description: \"\",\n    variants: [\n      {\n        id: \"bright-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OPENSTREETMAP\",\n    name: \"OpenStreetMap\",\n    description: \"\",\n    variants: [\n      {\n        id: \"openstreetmap\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n  {\n    referenceStyleID: \"TOPO\",\n    name: \"Topo\",\n    description: \"\",\n    variants: [\n      {\n        id: \"topo-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-shiny\",\n        name: \"Shiny\",\n        deprecated: true,\n        variantType: \"SHINY\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-topographique\",\n        name: \"Topographique\",\n        variantType: \"TOPOGRAPHIQUE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"VOYAGER\",\n    name: \"Voyager\",\n    description: \"\",\n    variants: [\n      {\n        id: \"voyager-v2\",\n        name: \"Default\",\n        deprecated: true,\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-darkmatter\",\n        name: \"Darkmatter\",\n        deprecated: true,\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-positron\",\n        name: \"Positron\",\n        deprecated: true,\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-vintage\",\n        name: \"Vintage\",\n        deprecated: true,\n        variantType: \"VINTAGE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"TONER\",\n    name: \"Toner\",\n    description: \"\",\n    variants: [\n      {\n        id: \"toner-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-background\",\n        name: \"Background\",\n        variantType: \"BACKGROUND\",\n        deprecated: true,\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-lite\",\n        name: \"Lite\",\n        variantType: \"LITE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-lines\",\n        name: \"Lines\",\n        variantType: \"LINES\",\n        deprecated: true,\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"DATAVIZ\",\n    name: \"Dataviz\",\n    description: \"\",\n    variants: [\n      {\n        id: \"dataviz\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"dataviz-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"dataviz-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BACKDROP\",\n    name: \"Backdrop\",\n    description: \"\",\n    variants: [\n      {\n        id: \"backdrop\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"backdrop-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"backdrop-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OCEAN\",\n    name: \"Ocean\",\n    description: \"\",\n    variants: [\n      {\n        id: \"ocean\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n  {\n    referenceStyleID: \"AQUARELLE\",\n    name: \"Aquarelle\",\n    description: \"Watercolor map for creative use\",\n    variants: [\n      {\n        id: \"aquarelle\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"aquarelle-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"aquarelle-vivid\",\n        name: \"Vivid\",\n        variantType: \"VIVID\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n  {\n    referenceStyleID: \"LANDSCAPE\",\n    name: \"Landscape\",\n    description: \"Terrain map for data overlays and visualisations\",\n    variants: [\n      {\n        id: \"landscape\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"landscape-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"landscape-vivid\",\n        name: \"Vivid\",\n        variantType: \"VIVID\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n];\n\nfunction makeReferenceStyleProxy(referenceStyle: ReferenceMapStyle) {\n  return new Proxy(referenceStyle, {\n    get(target, prop, receiver) {\n      if (target.hasVariant(prop as string)) {\n        return target.getVariant(prop as string);\n      }\n\n      // This variant does not exist for this style, but since it's full uppercase\n      // we guess that the dev tries to access a style variant. So instead of\n      // returning the default (STREETS.DEFAULT), we return the non-variant of the current style\n      if (prop.toString().toUpperCase() === (prop as string)) {\n        return referenceStyle.getDefaultVariant();\n      }\n\n      const style = Reflect.get(target, prop, receiver);\n\n      return style;\n    },\n  });\n}\n\nfunction buildMapStyles(): MapStyleType {\n  const mapStyle = {};\n\n  for (let i = 0; i < mapStylePresetList.length; i += 1) {\n    const refStyleInfo = mapStylePresetList[i];\n\n    const refStyle = makeReferenceStyleProxy(\n      new ReferenceMapStyle(refStyleInfo.name, refStyleInfo.referenceStyleID),\n    );\n\n    for (let j = 0; j < refStyleInfo.variants.length; j += 1) {\n      const variantInfo = refStyleInfo.variants[j];\n      const variant = new MapStyleVariant(\n        variantInfo.name, // name\n        variantInfo.variantType, // variantType\n        variantInfo.id, // id\n        refStyle, // referenceStyle\n        variantInfo.description,\n        variantInfo.imageURL, // imageURL\n        variantInfo.deprecated, // deprecated\n      );\n\n      refStyle.addVariant(variant);\n    }\n    mapStyle[refStyleInfo.referenceStyleID] = refStyle;\n  }\n  return mapStyle as MapStyleType;\n}\n\nexport function styleToStyle(\n  style: string | ReferenceMapStyle | MapStyleVariant | null | undefined,\n): string {\n  if (!style) {\n    return MapStyle[mapStylePresetList[0].referenceStyleID]\n      .getDefaultVariant()\n      .getId();\n  }\n\n  // If the provided style is a shorthand (eg. \"streets-v2\") then we make sure it's trimmed and lowercase\n  if (typeof style === \"string\" || style instanceof String) {\n    return style.trim().toLowerCase();\n  }\n\n  if (style instanceof MapStyleVariant) {\n    return style.getId();\n  }\n\n  if (style instanceof ReferenceMapStyle) {\n    return style.getDefaultVariant().getId();\n  }\n}\n\n/**\n * Contains all the reference map style created by MapTiler team as well as all the variants.\n * For example, `MapStyle.STREETS` and the variants:\n * - `MapStyle.STREETS.DARK`\n * - `MapStyle.STREETS.LIGHT`\n * - `MapStyle.STREETS.PASTEL`\n *\n */\nexport const MapStyle: MapStyleType = buildMapStyles();\n","import {\n  GeoJsonObject,\n  GeometryObject,\n  LineString,\n  MultiLineString,\n  Feature,\n  FeatureCollection,\n  Position,\n} from \"geojson\";\n\n/**\n * From a generic GeoJSON object extract thepossibly nested LineString and MultiLineString features\n * it contains. The result is a flat array made of LineString and MultiLineString.\n */\nfunction extractLineStrings(\n  geoJson: GeoJsonObject,\n): Array<LineString | MultiLineString> {\n  const lineStrings: Array<LineString | MultiLineString> = [];\n\n  function extractFromGeometry(geometry: GeometryObject) {\n    if (geometry.type === \"LineString\" || geometry.type === \"MultiLineString\") {\n      lineStrings.push(geometry as LineString | MultiLineString);\n    }\n  }\n\n  function extractFromFeature(feature: Feature) {\n    if (feature.geometry) {\n      extractFromGeometry(feature.geometry);\n    }\n  }\n\n  function extractFromFeatureCollection(collection: FeatureCollection) {\n    for (const feature of collection.features) {\n      if (feature.type === \"Feature\") {\n        extractFromFeature(feature);\n      } else if (feature.type === \"FeatureCollection\") {\n        extractFromFeatureCollection(feature as unknown as FeatureCollection); // had to add unknown\n      }\n    }\n  }\n\n  if (geoJson.type === \"Feature\") {\n    extractFromFeature(geoJson as Feature);\n  } else if (geoJson.type === \"FeatureCollection\") {\n    extractFromFeatureCollection(geoJson as FeatureCollection);\n  } else {\n    // It's a single geometry\n    extractFromGeometry(geoJson as GeometryObject);\n  }\n\n  return lineStrings;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p: Position, p1: Position, p2: Position): number {\n  let x = p1[0],\n    y = p1[1],\n    dx = p2[0] - x,\n    dy = p2[1] - y;\n\n  if (dx !== 0 || dy !== 0) {\n    const t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2[0];\n      y = p2[1];\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p[0] - x;\n  dy = p[1] - y;\n\n  return dx * dx + dy * dy;\n}\n\nfunction simplifyDPStep(\n  points: Array<Position>,\n  first: number,\n  last: number,\n  sqTolerance: number,\n  simplified: Array<Position>,\n) {\n  let maxSqDist = sqTolerance,\n    index;\n\n  for (let i = first + 1; i < last; i++) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1) {\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    }\n    simplified.push(points[index]);\n\n    if (last - index > 1) {\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(\n  points: Array<Position>,\n  sqTolerance: number,\n): Array<Position> {\n  const last = points.length - 1;\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n  return simplified;\n}\n\n/**\n * Simplify a path made of a list of GeoJSON Positions, with a tolerance.\n */\nfunction simplify(points: Array<Position>, tolerance: number): Array<Position> {\n  if (points.length <= 2) {\n    return points;\n  }\n\n  const sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n  const simplePoints = simplifyDouglasPeucker(points, sqTolerance);\n  return simplePoints;\n}\n\nexport const misc = {\n  extractLineStrings,\n  simplify,\n};\n","import { BBox, Position } from \"geojson\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { MapStyleVariant, ReferenceMapStyle, styleToStyle } from \"../mapstyle\";\nimport { misc } from \"../misc\";\n\n/**\n * Base set of options that can be provided to all the types of static maps\n */\nexport type StaticMapBaseOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Style of the map (not full style URL). Example: \"winter\", \"streets-v2\".\n   * Default: `\"streets-v2\"`\n   */\n  style?: string | ReferenceMapStyle | MapStyleVariant;\n\n  /**\n   * Double the size of the static map image to support hiDPI/Retina monitors.\n   * Default: `false`\n   */\n  hiDPI?: boolean;\n\n  /**\n   * Image format.\n   * Default: `\"png\"`\n   */\n  format?: \"png\" | \"jpg\" | \"webp\";\n\n  /**\n   * Width of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  width?: number;\n\n  /**\n   * Height of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  height?: number;\n\n  /**\n   * Placement of the attribution. Can also be set to `false` to not show attribution.\n   * Default: `\"bottomright\"`\n   */\n  attribution?: \"bottomright\" | \"bottomleft\" | \"topleft\" | \"topright\" | false;\n\n  /**\n   * A marker or list of markers to show on the map\n   * Default: none provided\n   */\n  markers?: StaticMapMarker | Array<StaticMapMarker>;\n\n  /**\n   * URL of the marker image. Applies only if one or multiple markers positions are provided.\n   * Default: none provided\n   */\n  markerIcon?: string;\n\n  /**\n   * Position of the marker regarding its coordinates. Applies only:\n   * - with a custom icon provided with `markerIcon`\n   * - if one or multiple markers positions are provided.\n   * Default: `\"bottom\"`\n   */\n  markerAnchor?:\n    | \"top\"\n    | \"left\"\n    | \"bottom\"\n    | \"right\"\n    | \"center\"\n    | \"topleft\"\n    | \"bottomleft\"\n    | \"topright\"\n    | \"bottomright\";\n\n  /**\n   * Draw a path or polygon on top of the map. If the path is too long it will be simplified, yet remaining accurate.\n   * Default: none provided\n   */\n  path?: Array<Position>;\n\n  /**\n   * Color of the path line. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: `\"blue\"`\n   */\n  pathStrokeColor?: string;\n\n  /**\n   * Color of the filling, also works if the polygon is not closed. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: none (transparent filling)\n   */\n  pathFillColor?: string;\n\n  /**\n   * Width of the path line in pixel. It can be floating point precision (ex: `0.5`)\n   * Default: `1` if `hiDPI` is `false` and `2` if `hiDPI` is `true`.\n   */\n  pathWidth?: number;\n};\n\n/**\n * Options that can be provided to centered static maps\n */\nexport type CenteredStaticMapOptions = StaticMapBaseOptions;\n\n/**\n * Options that can be provided to bounded static maps\n */\nexport type BoundedStaticMapOptions = StaticMapBaseOptions & {\n  /**\n   * Extra space added around the regio of interest, in percentage.\n   * Default: `0.1` (for 10%)\n   */\n  padding?: number;\n};\n\n/**\n * Options that can be provided to automatic static maps\n */\nexport type AutomaticStaticMapOptions = BoundedStaticMapOptions;\n\n/**\n * Definition of a maker to show on a static map\n */\nexport type StaticMapMarker = [\n  /**\n   * Longitude of the marker\n   */\n  number,\n  /**\n   * latitude of the marker\n   */\n  number,\n  /**\n   * Color of the marker with CSS syntax. Applies only if a custom `markerIcon` is not provided.\n   */\n  string,\n];\n\nfunction staticMapMarkerToString(\n  marker: StaticMapMarker,\n  includeColor = true,\n): string {\n  let str = `${marker[0]},${marker[1]}`;\n\n  if (marker.length === 3 && includeColor) {\n    str += `,${marker[2]}`;\n  }\n\n  return str;\n}\n\nfunction simplifyAndStringify(path: Array<Position>, maxNbChar = 3000): string {\n  let str = path.map((point) => point.join(\",\")).join(\"|\");\n  let tolerance = 0.000005;\n  const toleranceStep = 0.00001;\n\n  while (str.length > maxNbChar) {\n    const simplerPath = misc.simplify(path, tolerance);\n    // str = simplerPath.map(point => point.join(',')).join('|');\n    str = simplerPath.map((point) => `${point[0]},${point[1]}`).join(\"|\");\n    tolerance += toleranceStep;\n  }\n\n  return str;\n}\n\n/**\n * Construct the URL for a static map centered on one point.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param center\n * @param zoom\n * @param options\n * @returns\n */\nfunction centered(\n  center: Position,\n  zoom: number,\n  options: CenteredStaticMapOptions = {},\n): string {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${center[0]},${\n      center[1]\n    },${zoom}/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL,\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map using a bounding box\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param boundingBox\n * @param options\n * @returns\n */\nfunction bounded(\n  boundingBox: BBox,\n  options: BoundedStaticMapOptions = {},\n): string {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${boundingBox[0]},${\n      boundingBox[1]\n    },${boundingBox[2]},${boundingBox[3]}/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL,\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map automatically fitted around the provided path or markers.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param options\n * @returns\n */\nfunction automatic(options: AutomaticStaticMapOptions = {}): string {\n  if (!(\"markers\" in options) && !(\"path\" in options)) {\n    throw new Error(\n      \"Automatic static maps require markers and/or path to be created.\",\n    );\n  }\n\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(\n      style,\n    )}/static/auto/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL,\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * The **staticMaps** namespace contains an synchronous function build image URL of static map, as specified by the [MapTiler Static Map API](https://docs.maptiler.com/cloud/api/static-maps/).\n * The URL of static maps can then be used within a `<img />` markup element, as the `src` property value.\n */\nconst staticMaps = {\n  centered,\n  bounded,\n  automatic,\n};\n\nexport { staticMaps };\n","import { Position } from \"geojson\";\n\n/**\n * Average radius of Earth in meters\n */\nconst EARTH_RADIUS = 6371008.8;\n\n/**\n * Average circumfrence of Earth in meters\n */\nconst EARTH_CIRCUMFERENCE = 2 * Math.PI * EARTH_RADIUS;\n\n/**\n * Convert a wgs84 longitude to web Mercator X (west-east axis), where westmost X is 0 and eastmost X is 1.\n */\nfunction longitudeToMercatorX(lng: number): number {\n  return (180 + lng) / 360;\n}\n\n/**\n * Convert a wgs84 latitude to web Mercator Y (north-south axis), where northmost Y is 0 and southmost Y is 1.\n */\nfunction latitudeToMercatorY(lat: number): number {\n  return (\n    (180 -\n      (180 / Math.PI) *\n        Math.log(Math.tan(Math.PI / 4 + (lat * Math.PI) / 360))) /\n    360\n  );\n}\n\n/**\n * Convert a wgs84 position into a web Mercator position where north-west is [0, 0] and south-east is [1, 1]\n */\nfunction wgs84ToMercator(position: Position): Position {\n  const wrappedPos = wrapWgs84(position);\n  return [\n    longitudeToMercatorX(wrappedPos[0]),\n    latitudeToMercatorY(wrappedPos[1]),\n  ];\n}\n\n/**\n * Converts a mercator X (west-east axis in [0, 1]) to wgs84 longitude\n */\nfunction mercatorXToLongitude(x: number): number {\n  return x * 360 - 180;\n}\n\n/**\n * Converts a mercator Y (north-south axis in [0, 1]) to wgs84 latitude\n */\nfunction mercatorYToLatitude(y: number): number {\n  const y2 = 180 - y * 360;\n  return (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90;\n}\n\n/**\n * Converts a web Mercator position where north-west is [0, 0] and south-east is [1, 1] into a wgs84\n */\nfunction mercatorToWgs84(position: Position): Position {\n  return [mercatorXToLongitude(position[0]), mercatorYToLatitude(position[1])];\n}\n\n/**\n * Gives the distance in meters between two positions using the Haversine Formula.\n */\nfunction haversineDistanceWgs84(from: Position, to: Position): number {\n  const rad = Math.PI / 180;\n  const lat1 = from[1] * rad;\n  const lat2 = to[1] * rad;\n  const a =\n    Math.sin(lat1) * Math.sin(lat2) +\n    Math.cos(lat1) * Math.cos(lat2) * Math.cos((to[0] - from[0]) * rad);\n\n  const maxMeters = EARTH_RADIUS * Math.acos(Math.min(a, 1));\n  return maxMeters;\n}\n\n/**\n * Compute the cumulated distance for each position of an array of positions.\n * For I positions, there are I-1 distance, hence the distance at i corresponds\n * to the distance from the (i-1)th position to ith\n */\nfunction haversineCumulatedDistanceWgs84(positions: Position[]): number[] {\n  const cumulatedDistance = Array(positions.length);\n  cumulatedDistance[0] = 0;\n  const l = cumulatedDistance.length;\n\n  for (let i = 1; i < l; i++) {\n    cumulatedDistance[i] =\n      haversineDistanceWgs84(positions[i - 1], positions[i]) +\n      cumulatedDistance[i - 1];\n  }\n  return cumulatedDistance;\n}\n\n/**\n * Returns a position that has longitude in [-180, 180]\n */\nfunction wrapWgs84(position: Position): Position {\n  const lng = position[0];\n  const lat = position[1];\n\n  const d = 360;\n  const w = ((((lng + 180) % d) + d) % d) - 180;\n  const wrapLong = w === -180 ? 180 : w;\n\n  return [wrapLong, lat];\n}\n\n/*\n * The circumference at a line of latitude in meters.\n */\nexport function circumferenceAtLatitude(latitude: number) {\n  return EARTH_CIRCUMFERENCE * Math.cos((latitude * Math.PI) / 180);\n}\n\n/**\n * From a given mercator coordinate and a zoom level, computes the tile index\n */\nfunction mercatorToTileIndex(\n  /**\n   * Mercator coordinates (north-west is [0, 0], sourth-east is [1, 1])\n   */\n  position: Position,\n  /**\n   * Zoom level\n   */\n  zoom: number,\n  /**\n   * Returns integer tile indices if `true` or floating-point values if `false`\n   */\n  strict: boolean = true,\n): Position {\n  const numberOfTilePerAxis = 2 ** zoom;\n\n  const fIndex: Position = [\n    position[0] * numberOfTilePerAxis,\n    position[1] * numberOfTilePerAxis,\n  ];\n\n  return strict ? [~~fIndex[0], ~~fIndex[1]] : fIndex;\n}\n\n/**\n * From a given wgs84 coordinate and a zoom level, computes the tile index\n */\nfunction wgs84ToTileIndex(\n  /**\n   * Wgs84 coordinates\n   */\n  position: Position,\n  /**\n   * Zoom level\n   */\n  zoom: number,\n  /**\n   * Returns integer tile indices if `true` or floating-point values if `false`\n   */\n  strict: boolean = true,\n): Position {\n  const merc = wgs84ToMercator(position);\n  return mercatorToTileIndex(merc, zoom, strict);\n}\n\n/**\n * Converts a degree angle into a radian angle\n */\nfunction toRadians(degrees: number): number {\n  return (degrees * Math.PI) / 180;\n}\n\n/**\n * Converts a radian angle to a degree angle\n */\nfunction toDegrees(radians: number): number {\n  return (radians * 180) / Math.PI;\n}\n\n/**\n * Compute an intermediate point between two reference points using the Haversine formula.\n * If ratio is `0`, the returned position is pos1.\n * If ratio is `1`, the returned position is pos2.\n * If ratio is `0.5`, the returned position is halfway pos1 pos2 in distance.\n */\nfunction haversineIntermediateWgs84(\n  pos1: Position,\n  pos2: Position,\n  ratio: number,\n): Position {\n  const d = haversineDistanceWgs84(pos1, pos2);\n  const λ1 = toRadians(pos1[0]);\n  const φ1 = toRadians(pos1[1]);\n  const λ2 = toRadians(pos2[0]);\n  const φ2 = toRadians(pos2[1]);\n\n  const δ = d / EARTH_RADIUS; // Angular distance in radians\n  const a = Math.sin((1 - ratio) * δ) / Math.sin(δ);\n  const b = Math.sin(ratio * δ) / Math.sin(δ);\n  const x = a * Math.cos(φ1) * Math.cos(λ1) + b * Math.cos(φ2) * Math.cos(λ2);\n  const y = a * Math.cos(φ1) * Math.sin(λ1) + b * Math.cos(φ2) * Math.sin(λ2);\n  const z = a * Math.sin(φ1) + b * Math.sin(φ2);\n\n  const φ3 = Math.atan2(z, Math.sqrt(x * x + y * y));\n  const λ3 = Math.atan2(y, x);\n\n  return [toDegrees(λ3), toDegrees(φ3)];\n}\n\nexport const math = {\n  EARTH_RADIUS,\n  EARTH_CIRCUMFERENCE,\n  longitudeToMercatorX,\n  latitudeToMercatorY,\n  wgs84ToMercator,\n  mercatorXToLongitude,\n  mercatorYToLatitude,\n  mercatorToWgs84,\n  haversineDistanceWgs84,\n  wrapWgs84,\n  circumferenceAtLatitude,\n  mercatorToTileIndex,\n  wgs84ToTileIndex,\n  toRadians,\n  toDegrees,\n  haversineIntermediateWgs84,\n  haversineCumulatedDistanceWgs84,\n};\n","import QuickLRU from \"quick-lru\";\nimport { config } from \"./config\";\n\n/**\n * Informations about an image\n */\nexport type PixelData = {\n  /**\n   * The array of pixels as RGBRGB or RGBARGBA in a row-major order\n   */\n  pixels: Uint8ClampedArray | Uint8Array;\n  /**\n   * Width of the image in number of pixels\n   */\n  width: number;\n  /**\n   * Height of the image in number of pixels\n   */\n  height: number;\n  /**\n   * Number of components per pixel (3 if image is RGB, 4 if image is RGBA)\n   */\n  components: number;\n};\n\n/**\n * Type for the function that decodes an image file ArrayBuffer into valid pixel data\n */\nexport type BufferToPixelDataFunction = (ArrayBuffer) => Promise<PixelData>;\n\n/**\n * Main properties necessary from a TileJSON\n */\nexport type TileJSON = {\n  scale: string;\n  format: string;\n  maxzoom: number;\n  minzoom: number;\n  profile: string;\n  description: string;\n  attribution: string;\n  bounds: [number, number, number, number];\n  center: [number, number, number];\n\n  /**\n   * TileJSON version\n   */\n  tilejson: string;\n  name: string;\n  crs: string;\n  crs_wkt: string;\n  extent: [number, number, number, number];\n  tiles: string[];\n};\n\n// The LRU cache for storing tile PixelData\nlet tileCache = null;\n\n/**\n * Singleton-like function to access the tile cache\n */\nexport function getTileCache(): QuickLRU<string, PixelData> {\n  if (!tileCache) {\n    tileCache = new QuickLRU({ maxSize: config.tileCacheSize });\n  }\n  return tileCache;\n}\n\n/**\n * Browser function to decode an image file buffer into valid pixel data\n */\nexport async function bufferToPixelDataBrowser(\n  buff: ArrayBuffer,\n): Promise<PixelData> {\n  const blob = new Blob([buff]);\n  const imageBitmap = await createImageBitmap(blob);\n\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  canvas.width = imageBitmap.width;\n  canvas.height = imageBitmap.height;\n  ctx.drawImage(imageBitmap, 0, 0);\n\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  return {\n    pixels: imageData.data,\n    width: canvas.width,\n    height: canvas.height,\n    components: imageData.data.length / (canvas.width * canvas.height),\n  };\n}\n\nexport function getBufferToPixelDataParser(): BufferToPixelDataFunction {\n  if (config.bufferToPixelData) {\n    return config.bufferToPixelData;\n  }\n\n  if (typeof window !== \"undefined\") {\n    return bufferToPixelDataBrowser;\n  }\n\n  throw new Error(\n    \"An image file buffer to pixel data parser is necessary. Specify it in `config.bufferToPixelData`\",\n  );\n}\n","import { LineString, MultiLineString, Position } from \"geojson\";\n\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\nimport { math } from \"./math\";\nimport {\n  TileJSON,\n  getBufferToPixelDataParser,\n  getTileCache,\n} from \"../tiledecoding\";\n\nconst terrainTileJsonURL = \"tiles/terrain-rgb-v2/tiles.json\";\nlet terrainTileJson: TileJSON = null;\n\nexport type ElevationAtOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Zoom level to use for the terrain RGB tileset.\n   * If not provided, the highest zoom level will be used\n   */\n  zoom?: number;\n};\n\n/**\n * Options for batch elevation lookup\n */\nexport type ElevationBatchOptions = ElevationAtOptions & {\n  /**\n   * If provided, a median kernel of the given size will smooth the elevation\n   * to reduce very small local variations\n   */\n  smoothingKernelSize?: number;\n};\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\nasync function fetchTerrainTileJson(apiKey: string): Promise<TileJSON> {\n  const endpoint = new URL(terrainTileJsonURL, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", apiKey);\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n  if (res.ok) {\n    terrainTileJson = (await res.json()) as TileJSON;\n    return terrainTileJson;\n  } else {\n    if (!res.ok) {\n      throw new ServiceError(res, customMessages[res.status] ?? \"\");\n    }\n  }\n}\n\n/**\n * Get the elevation at a given position.\n * The returned position is of form [longitude, latitude, altitude]\n */\nasync function at(\n  /**\n   * Wgs84 position as [longitude, latitude]\n   */\n  position: Position,\n  /**\n   * Options\n   */\n  options: ElevationAtOptions = {},\n): Promise<Position> {\n  const apiKey = options.apiKey ?? config.apiKey;\n\n  if (!terrainTileJson) {\n    await fetchTerrainTileJson(apiKey);\n  }\n\n  const maxZoom = terrainTileJson.maxzoom;\n  let zoom = ~~(options.zoom ?? maxZoom);\n  if (zoom > maxZoom || zoom < 0) {\n    zoom = maxZoom;\n  }\n  const tileIndex = math.wgs84ToTileIndex(position, zoom, false);\n\n  const tileX = ~~tileIndex[0];\n  const tileY = ~~tileIndex[1];\n\n  if (!terrainTileJson.tiles.length) {\n    throw new Error(\"Terrain tileJSON tile list is empty.\");\n  }\n\n  const tileID = `terrain_${zoom.toString()}_${tileX.toString()}_${tileY.toString()}`;\n  let tilePixelData;\n\n  const cache = getTileCache();\n\n  if (cache.has(tileID)) {\n    tilePixelData = cache.get(tileID);\n  } else {\n    const tileURL = terrainTileJson.tiles[0]\n      .replace(\"{x}\", tileX.toString())\n      .replace(\"{y}\", tileY.toString())\n      .replace(\"{z}\", zoom.toString());\n\n    const tileRes = await callFetch(tileURL);\n\n    if (!tileRes.ok) {\n      throw new ServiceError(tileRes, customMessages[tileRes.status] ?? \"\");\n    }\n\n    const tileBuff = await tileRes.arrayBuffer();\n    const tileParser = getBufferToPixelDataParser();\n    tilePixelData = await tileParser(tileBuff);\n    cache.set(tileID, tilePixelData);\n  }\n\n  const pixelX = ~~(tilePixelData.width * (tileIndex[0] % 1));\n  const pixelY = ~~(tilePixelData.height * (tileIndex[1] % 1));\n  const pixelDataIndex =\n    (pixelY * tilePixelData.width + pixelX) * tilePixelData.components;\n  const R = tilePixelData.pixels[pixelDataIndex];\n  const G = tilePixelData.pixels[pixelDataIndex + 1];\n  const B = tilePixelData.pixels[pixelDataIndex + 2];\n  const elevation = -10000 + (R * 256 * 256 + G * 256 + B) * 0.1;\n\n  return [position[0], position[1], elevation];\n}\n\n/**\n * Perform a batch elevation request\n */\nasync function batch(\n  /**\n   * Wgs84 positions as [[lng0, lat0], [lng1, lat1], [lng2, lat2], ...]\n   */\n  positions: Position[],\n  /**\n   * Options\n   */\n  options: ElevationBatchOptions = {},\n): Promise<Position[]> {\n  const apiKey = options.apiKey ?? config.apiKey;\n\n  if (!terrainTileJson) {\n    await fetchTerrainTileJson(apiKey);\n  }\n\n  // Better throw about not bein able to parse tiles before fetching them\n  const tileParser = getBufferToPixelDataParser();\n  const tileURLSchema = terrainTileJson.tiles[0];\n  const cache = getTileCache();\n\n  const maxZoom = terrainTileJson.maxzoom;\n  let zoom = ~~(options.zoom ?? maxZoom);\n  if (zoom > maxZoom || zoom < 0) {\n    zoom = maxZoom;\n  }\n  const tileIndicesFloats = positions.map((position) =>\n    math.wgs84ToTileIndex(position, zoom, false),\n  );\n  const tileIndicesInteger = tileIndicesFloats.map((index) => [\n    ~~index[0],\n    ~~index[1],\n  ]);\n  const tileIDs = tileIndicesInteger.map(\n    (index) =>\n      `terrain_${zoom.toString()}_${index[0].toString()}_${index[1].toString()}`,\n  );\n\n  // unique tiles to fetch (excluding those already in cache and the doublons)\n  const uniqueTilesToFetch = Array.from(\n    new Set(tileIDs.filter((tileID) => !cache.has(tileID))),\n  ).map((tileID) => tileID.split(\"_\").slice(1));\n  const tileURLs = uniqueTilesToFetch.map((zxy) =>\n    tileURLSchema\n      .replace(\"{x}\", zxy[1].toString())\n      .replace(\"{y}\", zxy[2].toString())\n      .replace(\"{z}\", zxy[0].toString()),\n  );\n  const promisesFetchTiles = tileURLs.map((url) => callFetch(url));\n  const resTiles = await Promise.allSettled(promisesFetchTiles);\n  const fulfilledRes = resTiles\n    .map((el: PromiseSettledResult<Response>) =>\n      el.status === \"fulfilled\" ? el.value : null,\n    )\n    .filter((res) => res);\n  const fulfilledRButNotOkRes = fulfilledRes.filter((res) => !res.ok);\n\n  if (fulfilledRes.length !== promisesFetchTiles.length) {\n    throw new Error(\"Some tiles could not be fetched.\");\n  }\n\n  if (fulfilledRButNotOkRes.length) {\n    throw new ServiceError(\n      fulfilledRButNotOkRes[0],\n      customMessages[fulfilledRButNotOkRes[0].status] ?? \"\",\n    );\n  }\n\n  const tileArrayBuffers = await Promise.all(\n    fulfilledRes.map((res) => res.arrayBuffer()),\n  );\n\n  // It is possible that the tile is missing\n  if (!tileArrayBuffers.every((buff) => buff.byteLength > 0)) {\n    throw new Error(\"Some tiles are not available.\");\n  }\n\n  const tilePixelDatas = await Promise.all(\n    tileArrayBuffers.map((buff) => tileParser(buff)),\n  );\n\n  // Adding to cache\n  tilePixelDatas.forEach((tilePixelData, i) => {\n    const zxy = uniqueTilesToFetch[i];\n    const tileID = `terrain_${zxy[0].toString()}_${zxy[1].toString()}_${zxy[2].toString()}`;\n    cache.set(tileID, tilePixelData);\n  });\n\n  const elevatedPositions = positions.map((position, i) => {\n    const tileID = tileIDs[i];\n    const tileIndexFloat = tileIndicesFloats[i];\n    const tilePixelData = cache.get(tileID);\n\n    // const pixelX = ~~(tilePixelData.width * (tileIndexFloat[0] % 1));\n    // const pixelY = ~~(tilePixelData.height * (tileIndexFloat[1] % 1));\n\n    const pixelX = Math.min(\n      Math.round(tilePixelData.width * (tileIndexFloat[0] % 1)),\n      tilePixelData.width - 1,\n    );\n    const pixelY = Math.min(\n      Math.round(tilePixelData.height * (tileIndexFloat[1] % 1)),\n      tilePixelData.height - 1,\n    );\n\n    const pixelDataIndex =\n      (pixelY * tilePixelData.width + pixelX) * tilePixelData.components;\n    const R = tilePixelData.pixels[pixelDataIndex];\n    const G = tilePixelData.pixels[pixelDataIndex + 1];\n    const B = tilePixelData.pixels[pixelDataIndex + 2];\n    const elevation = -10000 + (R * 256 * 256 + G * 256 + B) * 0.1;\n\n    return [position[0], position[1], ~~(elevation * 1000) / 1000];\n  });\n\n  // Smoothing\n  if (options.smoothingKernelSize) {\n    // make sure the kernel is of an odd size\n    const kernelSize = ~~(options.smoothingKernelSize / 2) * 2 + 1;\n    const elevations: number[] = elevatedPositions.map((pos) => pos[2]);\n    const kernelSpan = ~~(kernelSize / 2);\n\n    for (let i = kernelSpan; i < elevations.length - kernelSpan - 1; i += 1) {\n      let sum = 0;\n      for (let j = 0; j < kernelSize; j += 1) {\n        const elev = elevations[i - kernelSpan + j];\n        sum += elev;\n      }\n      sum /= kernelSize;\n      elevatedPositions[i][2] = sum;\n    }\n  }\n\n  return elevatedPositions;\n}\n\n/**\n * Creates a clone of a GeoJSON LineString (deep copy with structuredClone) that contains the computed elevation\n * as the third element of each position array ([lng, lat, alt])\n */\nasync function fromLineString(\n  /**\n   * A GeoJSON LineStriung feature\n   */\n  ls: LineString,\n  /**\n   * Options\n   */\n  options: ElevationBatchOptions = {},\n): Promise<LineString> {\n  if (ls.type !== \"LineString\") {\n    throw new Error(\"The provided object is not a GeoJSON LineString\");\n  }\n\n  const clone = structuredClone(ls) as LineString;\n  const elevatedPositions = await batch(clone.coordinates, options);\n  clone.coordinates = elevatedPositions;\n\n  return clone;\n}\n\n/**\n * Creates a clone of a MultiLineString (deep copy with structuredClone) that contains the computed elevation\n * as the third element of each position array ([lng, lat, alt])\n */\nasync function fromMultiLineString(\n  /**\n   * A GeoJSON LineStriung feature\n   */\n  ls: MultiLineString,\n  /**\n   * Options\n   */\n  options: ElevationBatchOptions = {},\n): Promise<MultiLineString> {\n  if (ls.type !== \"MultiLineString\") {\n    throw new Error(\"The provided object is not a GeoJSON MultiLineString\");\n  }\n\n  const clone = structuredClone(ls) as MultiLineString;\n  const multiLengths = clone.coordinates.map((poss) => poss.length);\n\n  // This is equivalent to a batch of batch, so we makes the multilinestring a unique\n  // line string to prevent batch to fetch multiple times the same tile\n  const flattenPositions = clone.coordinates.flat();\n  const flattenPositionsElevated = await batch(flattenPositions, options);\n\n  // And then chopping back into a multi line string\n  const result: Position[][] = [];\n  let index = 0;\n  for (const length of multiLengths) {\n    result.push(flattenPositionsElevated.slice(index, index + length));\n    index += length;\n  }\n\n  clone.coordinates = result;\n  return clone;\n}\n\nexport const elevation = {\n  at,\n  batch,\n  fromLineString,\n  fromMultiLineString,\n};\n"],"names":["customMessages","batch","elevation"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"debugId":null}},
    {"offset": {"line": 2730, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/uuid/dist/esm/native.js"],"sourcesContent":["import { randomUUID } from 'crypto';\nexport default { randomUUID };\n"],"names":[],"mappings":";;;AAAA;;uCACe;IAAE,YAAA,qGAAA,CAAA,aAAU;AAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2744, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/uuid/dist/esm/rng.js"],"sourcesContent":["import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,YAAY,IAAI,WAAW;AACjC,IAAI,UAAU,UAAU,MAAM;AACf,SAAS;IACpB,IAAI,UAAU,UAAU,MAAM,GAAG,IAAI;QACjC,CAAA,GAAA,qGAAA,CAAA,iBAAc,AAAD,EAAE;QACf,UAAU;IACd;IACA,OAAO,UAAU,KAAK,CAAC,SAAU,WAAW;AAChD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2764, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/uuid/dist/esm/regex.js"],"sourcesContent":["export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;\n"],"names":[],"mappings":";;;uCAAe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2774, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/uuid/dist/esm/validate.js"],"sourcesContent":["import REGEX from './regex.js';\nfunction validate(uuid) {\n    return typeof uuid === 'string' && REGEX.test(uuid);\n}\nexport default validate;\n"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,SAAS,IAAI;IAClB,OAAO,OAAO,SAAS,YAAY,4IAAA,CAAA,UAAK,CAAC,IAAI,CAAC;AAClD;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2789, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/uuid/dist/esm/stringify.js"],"sourcesContent":["import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n"],"names":[],"mappings":";;;;AAAA;;AACA,MAAM,YAAY,EAAE;AACpB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,EAAE,EAAG;IAC1B,UAAU,IAAI,CAAC,CAAC,IAAI,KAAK,EAAE,QAAQ,CAAC,IAAI,KAAK,CAAC;AAClD;AACO,SAAS,gBAAgB,GAAG,EAAE,SAAS,CAAC;IAC3C,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC9B,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC1B,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC1B,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC1B,MACA,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC1B,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC1B,MACA,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC1B,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC1B,MACA,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC1B,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAC1B,MACA,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAC3B,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAC3B,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAC3B,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAC3B,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAC3B,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,WAAW;AAChD;AACA,SAAS,UAAU,GAAG,EAAE,SAAS,CAAC;IAC9B,MAAM,OAAO,gBAAgB,KAAK;IAClC,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,UAAQ,AAAD,EAAE,OAAO;QACjB,MAAM,UAAU;IACpB;IACA,OAAO;AACX;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2816, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/uuid/dist/esm/v4.js"],"sourcesContent":["import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,SAAS,GAAG,OAAO,EAAE,GAAG,EAAE,MAAM;IAC5B,IAAI,6IAAA,CAAA,UAAM,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,SAAS;QACvC,OAAO,6IAAA,CAAA,UAAM,CAAC,UAAU;IAC5B;IACA,UAAU,WAAW,CAAC;IACtB,MAAM,OAAO,QAAQ,MAAM,IAAI,QAAQ,GAAG,QAAQ,CAAA,GAAA,0IAAA,CAAA,UAAG,AAAD;IACpD,IAAI,KAAK,MAAM,GAAG,IAAI;QAClB,MAAM,IAAI,MAAM;IACpB;IACA,IAAI,CAAC,EAAE,GAAG,AAAC,IAAI,CAAC,EAAE,GAAG,OAAQ;IAC7B,IAAI,CAAC,EAAE,GAAG,AAAC,IAAI,CAAC,EAAE,GAAG,OAAQ;IAC7B,IAAI,KAAK;QACL,SAAS,UAAU;QACnB,IAAI,SAAS,KAAK,SAAS,KAAK,IAAI,MAAM,EAAE;YACxC,MAAM,IAAI,WAAW,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAE,SAAS,GAAG,wBAAwB,CAAC;QAC3F;QACA,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,EAAG;YACzB,GAAG,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,EAAE;QAC7B;QACA,OAAO;IACX;IACA,OAAO,CAAA,GAAA,gJAAA,CAAA,kBAAe,AAAD,EAAE;AAC3B;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2865, "column": 0}, "map": {"version":3,"sources":["file:///Users/chentzen02/Documents/CS188_HCI/git-plans/git-plans-react/node_modules/js-base64/base64.mjs"],"sourcesContent":["/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}